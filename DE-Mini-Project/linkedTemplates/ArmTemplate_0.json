{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DE-Mini-Project"
		},
		"LS_Mongodb_Atlas_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Mongodb_Atlas'"
		},
		"LS_Sqldb_Files_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_Sqldb_Files'"
		},
		"LS_blob_storage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_blob_storage'"
		},
		"LS_Mongodb_Atlas_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "test"
		},
		"LS_Sqldb_Files_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "dbs-training.database.windows.net"
		},
		"LS_Sqldb_Files_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "db_training"
		},
		"LS_Sqldb_Files_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sujithaa"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/LS_Mongodb_Atlas')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Getting data from mongodb atlas",
				"annotations": [],
				"type": "MongoDbAtlas",
				"typeProperties": {
					"connectionString": "[parameters('LS_Mongodb_Atlas_connectionString')]",
					"database": "[parameters('LS_Mongodb_Atlas_properties_typeProperties_database')]",
					"driverVersion": "v2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Sqldb_Files')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_Sqldb_Files_properties_typeProperties_server')]",
					"database": "[parameters('LS_Sqldb_Files_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_Sqldb_Files_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_Sqldb_Files_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_blob_storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "storing the data from mongodb atlas",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_blob_storage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Mongodb_Atlas_Projects')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Mongodb_Atlas",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mongodb_Sqldb"
				},
				"annotations": [],
				"type": "MongoDbAtlasCollection",
				"schema": [],
				"typeProperties": {
					"collection": "projects"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Mongodb_Atlas')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Mongodb_Atlas_Tasks')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Mongodb_Atlas",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mongodb_Sqldb"
				},
				"annotations": [],
				"type": "MongoDbAtlasCollection",
				"schema": [],
				"typeProperties": {
					"collection": "tasks"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Mongodb_Atlas')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Mongodb_Atlas_Users')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Mongodb_Atlas",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mongodb_Sqldb"
				},
				"annotations": [],
				"type": "MongoDbAtlasCollection",
				"schema": [],
				"typeProperties": {
					"collection": "users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Mongodb_Atlas')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Sqldb_Projects')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Sqldb_Files",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mongodb_Sqldb"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "staging",
					"table": "projects"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sqldb_Files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Sqldb_Tasks')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Sqldb_Files",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mongodb_Sqldb"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "staging",
					"table": "tasks"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sqldb_Files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Sqldb_User')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Sqldb_Files",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mongodb_Sqldb"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "staging",
					"table": "users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sqldb_Files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Cleaning_Files')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Sqldb_Files",
								"type": "LinkedServiceReference"
							},
							"name": "UserTable"
						},
						{
							"linkedService": {
								"referenceName": "LS_Sqldb_Files",
								"type": "LinkedServiceReference"
							},
							"name": "ProjectTable"
						},
						{
							"linkedService": {
								"referenceName": "LS_Sqldb_Files",
								"type": "LinkedServiceReference"
							},
							"name": "TaskTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Sqldb_Files",
								"type": "LinkedServiceReference"
							},
							"name": "usertable1"
						},
						{
							"linkedService": {
								"referenceName": "LS_Sqldb_Files",
								"type": "LinkedServiceReference"
							},
							"name": "projecttable1"
						},
						{
							"linkedService": {
								"referenceName": "LS_Sqldb_Files",
								"type": "LinkedServiceReference"
							},
							"name": "tasktable1"
						}
					],
					"transformations": [
						{
							"name": "filter"
						},
						{
							"name": "select1"
						},
						{
							"name": "select3"
						},
						{
							"name": "sort"
						},
						{
							"name": "cast1"
						},
						{
							"name": "cast2"
						},
						{
							"name": "cast3"
						},
						{
							"name": "select4"
						},
						{
							"name": "cast4"
						},
						{
							"name": "cast5"
						},
						{
							"name": "cast6"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {$oid} as string,",
						"          username as string,",
						"          email as string,",
						"          password as string,",
						"          role as string,",
						"          {createdAt_$date_$numberLong} as string,",
						"          {updatedAt_$date_$numberLong} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'staging',",
						"     tableName: 'users',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UserTable",
						"source(output(",
						"          {_id_$oid} as string,",
						"          name as string,",
						"          description as string,",
						"          {owner_$oid} as string,",
						"          {createdBy_$oid} as string,",
						"          {createdAt_$date_$numberLong} as string,",
						"          {updatedAt_$date_$numberLong} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'staging',",
						"     tableName: 'projects',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProjectTable",
						"source(output(",
						"          {_id_$oid} as string,",
						"          title as string,",
						"          description as string,",
						"          {project_$oid} as string,",
						"          {assignedTo_$oid} as string,",
						"          status as string,",
						"          {deadline_$date_$numberLong} as string,",
						"          {createdAt_$date_$numberLong} as string,",
						"          {updatedAt_$date_$numberLong} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'staging',",
						"     tableName: 'tasks',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> TaskTable",
						"select1 filter(!isNull(User_ID)) ~> filter",
						"UserTable select(mapColumn(",
						"          User_ID = {$oid},",
						"          Username = username,",
						"          Email = email,",
						"          Role = role",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"TaskTable select(mapColumn(",
						"          Tasks_ID = {_id_$oid},",
						"          Title = title,",
						"          Description = description,",
						"          Project_ID = {project_$oid},",
						"          User_ID = {assignedTo_$oid},",
						"          status,",
						"          Deadline_Date = {deadline_$date_$numberLong},",
						"          Created_Date = {createdAt_$date_$numberLong},",
						"          Updated_Date = {updatedAt_$date_$numberLong}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"filter sort(asc(User_ID, true)) ~> sort",
						"cast2 cast(output(",
						"          Deadline_Date as date,",
						"          Created_Date as date,",
						"          Updated_Date as date",
						"     ),",
						"     errors: true) ~> cast1",
						"cast3 cast(output(",
						"          Deadline_Date as timestamp,",
						"          Created_Date as timestamp,",
						"          Updated_Date as timestamp",
						"     ),",
						"     errors: true) ~> cast2",
						"select3 cast(output(",
						"          Deadline_Date as long,",
						"          Created_Date as long,",
						"          Updated_Date as long",
						"     ),",
						"     errors: true) ~> cast3",
						"ProjectTable select(mapColumn(",
						"          Project_ID = {_id_$oid},",
						"          Project_Title = name,",
						"          Description = description,",
						"          Teamlead_ID = {owner_$oid},",
						"          Admin_ID = {createdBy_$oid},",
						"          Created_Date = {createdAt_$date_$numberLong}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4 cast(output(",
						"          Created_Date as long",
						"     ),",
						"     errors: true) ~> cast4",
						"cast4 cast(output(",
						"          Created_Date as timestamp",
						"     ),",
						"     errors: true) ~> cast5",
						"cast5 cast(output(",
						"          Created_Date as date",
						"     ),",
						"     errors: true) ~> cast6",
						"sort sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'users',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> usertable1",
						"cast6 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'projects',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> projecttable1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'tasks',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> tasktable1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sqldb_Files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Transform_Files')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_Sqldb_Files",
								"type": "LinkedServiceReference"
							},
							"name": "user"
						},
						{
							"linkedService": {
								"referenceName": "LS_Sqldb_Files",
								"type": "LinkedServiceReference"
							},
							"name": "project"
						},
						{
							"linkedService": {
								"referenceName": "LS_Sqldb_Files",
								"type": "LinkedServiceReference"
							},
							"name": "task"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Sqldb_Files",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "joinuserandprojects"
						},
						{
							"name": "getadmin"
						},
						{
							"name": "window1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          User_ID as string,",
						"          Username as string,",
						"          Email as string,",
						"          Role as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'users',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> user",
						"source(output(",
						"          Project_ID as string,",
						"          Project_Title as string,",
						"          Description as string,",
						"          Teamlead_ID as string,",
						"          Admin_ID as string,",
						"          Created_Date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'projects',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> project",
						"source(output(",
						"          Tasks_ID as string,",
						"          Title as string,",
						"          Description as string,",
						"          Project_ID as string,",
						"          User_ID as string,",
						"          status as string,",
						"          Deadline_Date as date,",
						"          Created_Date as date,",
						"          Updated_Date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'tasks',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> task",
						"user, project join(User_ID == Admin_ID,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinuserandprojects",
						"joinuserandprojects filter(Role=='admin') ~> getadmin",
						"getadmin window(over(Username),",
						"     NoOfProjects = count(Project_ID)) ~> window1",
						"window1 select(mapColumn(",
						"          Admin_ID,",
						"          User_ID,",
						"          AdminName = Username,",
						"          Email,",
						"          Role,",
						"          Project_ID,",
						"          Project_Title,",
						"          Description,",
						"          Teamlead_ID,",
						"          Created_Date,",
						"          NoOfProjects",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"project, task join(project@Project_ID == task@Project_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'report',",
						"     tableName: 'AdminProjects',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sqldb_Files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Mongodb_Atlas_Sqldb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$oid']"
										},
										"sink": {
											"name": "$oid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['username']"
										},
										"sink": {
											"name": "username",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['email']"
										},
										"sink": {
											"name": "email",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['password']"
										},
										"sink": {
											"name": "password",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['role']"
										},
										"sink": {
											"name": "role",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdAt']['$date']['$numberLong']"
										},
										"sink": {
											"name": "createdAt_$date_$numberLong",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['updatedAt']['$date']['$numberLong']"
										},
										"sink": {
											"name": "updatedAt_$date_$numberLong",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Mongodb_Atlas_Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Sqldb_User",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$oid']"
										},
										"sink": {
											"name": "_id_$oid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['name']"
										},
										"sink": {
											"name": "name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['description']"
										},
										"sink": {
											"name": "description",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['owner']['$oid']"
										},
										"sink": {
											"name": "owner_$oid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdBy']['$oid']"
										},
										"sink": {
											"name": "createdBy_$oid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdAt']['$date']['$numberLong']"
										},
										"sink": {
											"name": "createdAt_$date_$numberLong",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['updatedAt']['$date']['$numberLong']"
										},
										"sink": {
											"name": "updatedAt_$date_$numberLong",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Mongodb_Atlas_Projects",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Sqldb_Projects",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data3",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$oid']"
										},
										"sink": {
											"name": "_id_$oid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['title']"
										},
										"sink": {
											"name": "title",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['description']"
										},
										"sink": {
											"name": "description",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['project']['$oid']"
										},
										"sink": {
											"name": "project_$oid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['assignedTo']['$oid']"
										},
										"sink": {
											"name": "assignedTo_$oid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['status']"
										},
										"sink": {
											"name": "status",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['deadline']['$date']['$numberLong']"
										},
										"sink": {
											"name": "deadline_$date_$numberLong",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdAt']['$date']['$numberLong']"
										},
										"sink": {
											"name": "createdAt_$date_$numberLong",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['updatedAt']['$date']['$numberLong']"
										},
										"sink": {
											"name": "updatedAt_$date_$numberLong",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Mongodb_Atlas_Tasks",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Sqldb_Tasks",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Mongodb_Atlas_Users')]",
				"[concat(variables('factoryId'), '/datasets/DS_Sqldb_User')]",
				"[concat(variables('factoryId'), '/datasets/DS_Mongodb_Atlas_Projects')]",
				"[concat(variables('factoryId'), '/datasets/DS_Sqldb_Projects')]",
				"[concat(variables('factoryId'), '/datasets/DS_Mongodb_Atlas_Tasks')]",
				"[concat(variables('factoryId'), '/datasets/DS_Sqldb_Tasks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Prep_Reporting')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Transform_Files",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"user": {},
									"project": {},
									"task": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Transform_Files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Stage_to_Prep')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Cleaned_Tables",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Cleaning_Files",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"UserTable": {},
									"ProjectTable": {},
									"TaskTable": {},
									"usertable1": {},
									"projecttable1": {},
									"tasktable1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Cleaning_Files')]"
			]
		}
	]
}