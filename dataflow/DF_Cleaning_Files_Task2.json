{
	"name": "DF_Cleaning_Files_Task2",
	"properties": {
		"folder": {
			"name": "TaskTwo"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "StagedProduct"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "CleanedProductsTable"
				}
			],
			"transformations": [
				{
					"name": "ChangeDateType"
				},
				{
					"name": "RemoveNullValues"
				}
			],
			"scriptLines": [
				"source(output(",
				"          department_code as string,",
				"          category_code as string,",
				"          category_name as string,",
				"          search_category_code as string,",
				"          series_code as string,",
				"          series_name as string,",
				"          brand_code as string,",
				"          brand_url_code as string,",
				"          brand_name as string,",
				"          min_standard_days_to_ship as string,",
				"          max_standard_days_to_ship as string,",
				"          direct_cart_type as string,",
				"          price_check_less_flag as string,",
				"          min_standard_unit_price as string,",
				"          max_standard_unit_price as string,",
				"          min_price_per_piece as string,",
				"          max_price_per_piece as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'raw',",
				"     tableName: 'products',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> StagedProduct",
				"StagedProduct cast(output(",
				"          min_standard_days_to_ship as integer,",
				"          max_standard_days_to_ship as integer,",
				"          min_standard_unit_price as integer,",
				"          max_standard_unit_price as integer,",
				"          min_price_per_piece as integer,",
				"          max_price_per_piece as integer",
				"     ),",
				"     errors: true) ~> ChangeDateType",
				"ChangeDateType derive(min_standard_unit_price = iif(isNull(min_standard_unit_price), 0, min_standard_unit_price),",
				"          max_standard_unit_price = iif(isNull(max_standard_unit_price), 0, max_standard_unit_price),",
				"          min_price_per_piece = iif(isNull(min_price_per_piece), 0, min_price_per_piece),",
				"          max_price_per_piece = iif(isNull(max_price_per_piece), 0, max_price_per_piece)) ~> RemoveNullValues",
				"RemoveNullValues sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'products',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> CleanedProductsTable"
			]
		}
	}
}