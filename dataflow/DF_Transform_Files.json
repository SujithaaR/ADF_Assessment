{
	"name": "DF_Transform_Files",
	"properties": {
		"folder": {
			"name": "TaskOne"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "user"
				},
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "project"
				},
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "tasks"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "TotalProjects"
				},
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "TotalTasks"
				},
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "TeamMembersTasks"
				}
			],
			"transformations": [
				{
					"name": "joinUserandProject"
				},
				{
					"name": "FilteringbasedonROLE"
				},
				{
					"name": "CalculatingTotalProjects"
				},
				{
					"name": "joinProjectandUser"
				},
				{
					"name": "joinTaskTable"
				},
				{
					"name": "selectRequiredFields"
				},
				{
					"name": "TotalTasksandStatus"
				},
				{
					"name": "joinTaskandUser"
				},
				{
					"name": "selectRequiredFieldsfromJoin"
				},
				{
					"name": "AggregatUsers"
				}
			],
			"scriptLines": [
				"source(output(",
				"          User_ID as string,",
				"          Username as string,",
				"          Email as string,",
				"          Role as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'users',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> user",
				"source(output(",
				"          Project_ID as string,",
				"          Project_Title as string,",
				"          Description as string,",
				"          Teamlead_ID as string,",
				"          Admin_ID as string,",
				"          Created_Date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'projects',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> project",
				"source(output(",
				"          Tasks_ID as string,",
				"          Title as string,",
				"          Description as string,",
				"          Project_ID as string,",
				"          User_ID as string,",
				"          status as string,",
				"          Deadline_Date as date,",
				"          Created_Date as date,",
				"          Updated_Date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'tasks',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> tasks",
				"user, project join(User_ID == Admin_ID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinUserandProject",
				"joinUserandProject filter(Role=='admin') ~> FilteringbasedonROLE",
				"FilteringbasedonROLE window(over(Admin_ID),",
				"     TotalProjects = count(Project_ID)) ~> CalculatingTotalProjects",
				"project, user join(Teamlead_ID == User_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinProjectandUser",
				"joinProjectandUser, tasks join(project@Project_ID == tasks@Project_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinTaskTable",
				"joinTaskTable select(mapColumn(",
				"          Project_Title,",
				"          Username,",
				"          Tasks_ID,",
				"          Title,",
				"          Project_ID = tasks@Project_ID,",
				"          User_ID = tasks@User_ID,",
				"          status,",
				"          Deadline_Date,",
				"          Created_Date = tasks@Created_Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredFields",
				"selectRequiredFields aggregate(groupBy(Username),",
				"     TotalTasks = count(Tasks_ID),",
				"          completedTasks = countIf(status == 'completed'),",
				"          {Pending Tasks} = countIf(status=='pending'),",
				"          {InProgress Tasks} = countIf(status=='in progress')) ~> TotalTasksandStatus",
				"tasks, user join(tasks@User_ID == user@User_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinTaskandUser",
				"joinTaskandUser select(mapColumn(",
				"          Tasks_ID,",
				"          Title,",
				"          status,",
				"          Deadline_Date,",
				"          Created_Date,",
				"          User_ID = user@User_ID,",
				"          Username,",
				"          Role",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredFieldsfromJoin",
				"selectRequiredFieldsfromJoin aggregate(groupBy(Username),",
				"     TotalTeamMemberTasks = count(Tasks_ID),",
				"          CompletedTasks = countIf(status==\"completed\"),",
				"          PendingTasks = countIf(status==\"pending\"),",
				"          InprogressTasks = countIf(status==\"in progress\")) ~> AggregatUsers",
				"CalculatingTotalProjects sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'report',",
				"     tableName: 'TotalProjects',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> TotalProjects",
				"TotalTasksandStatus sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'report',",
				"     tableName: 'TaskDetails',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> TotalTasks",
				"AggregatUsers sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'report',",
				"     tableName: 'TeamMemberUpdate',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> TeamMembersTasks"
			]
		}
	}
}