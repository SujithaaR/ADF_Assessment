{
	"name": "DF_Transform_Files",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "user"
				},
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "project"
				},
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "tasks"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				},
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "sink3"
				},
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "sink4"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "window1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "join4"
				},
				{
					"name": "select4"
				},
				{
					"name": "filter2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          User_ID as string,",
				"          Username as string,",
				"          Email as string,",
				"          Role as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'users',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> user",
				"source(output(",
				"          Project_ID as string,",
				"          Project_Title as string,",
				"          Description as string,",
				"          Teamlead_ID as string,",
				"          Admin_ID as string,",
				"          Created_Date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'projects',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> project",
				"source(output(",
				"          Tasks_ID as string,",
				"          Title as string,",
				"          Description as string,",
				"          Project_ID as string,",
				"          User_ID as string,",
				"          status as string,",
				"          Deadline_Date as date,",
				"          Created_Date as date,",
				"          Updated_Date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'tasks',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> tasks",
				"user, project join(User_ID == Admin_ID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 filter(Role=='admin') ~> filter1",
				"filter1 window(over(Admin_ID),",
				"     TotalProjects = count(Project_ID)) ~> window1",
				"project, user join(Teamlead_ID == User_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, tasks join(project@Project_ID == tasks@Project_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"select3 select(mapColumn(",
				"          Project_Title,",
				"          Username,",
				"          Title,",
				"          status,",
				"          Deadline_Date,",
				"          Created_Date = tasks@Created_Date,",
				"          Updated_Date,",
				"          Tasks_ID,",
				"          Project_ID = tasks@Project_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(Username),",
				"     TotalTasks = count(Project_ID)) ~> aggregate1",
				"select1 derive(TaskDuration = (toLong(toTimestamp(Deadline_Date)) - toLong(toTimestamp(Created_Date))) / 86400000) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          TeamLeadName = Username,",
				"          TaskTitle = Title,",
				"          Deadline_Date,",
				"          Created_Date,",
				"          TaskDuration",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"join3 select(mapColumn(",
				"          Project_ID = project@Project_ID,",
				"          Project_Title,",
				"          Description = project@Description,",
				"          Teamlead_ID,",
				"          Admin_ID,",
				"          Created_Date = project@Created_Date,",
				"          User_ID = user@User_ID,",
				"          Username,",
				"          Email,",
				"          Role,",
				"          Tasks_ID,",
				"          Title,",
				"          Description = tasks@Description,",
				"          Project_ID = tasks@Project_ID,",
				"          User_ID = tasks@User_ID,",
				"          status,",
				"          Deadline_Date,",
				"          Created_Date = tasks@Created_Date,",
				"          Updated_Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"tasks, user join(tasks@User_ID == user@User_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4 select(mapColumn(",
				"          Title,",
				"          status,",
				"          Deadline_Date,",
				"          Created_Date,",
				"          Username,",
				"          Role",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4 filter(status==\"completed\") ~> filter2",
				"window1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'report',",
				"     tableName: 'TotalProjects',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'report',",
				"     tableName: 'TeamleadTasks',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'report',",
				"     tableName: 'report',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink3",
				"filter2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'report',",
				"     tableName: 'CompletedTasks',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink4"
			]
		}
	}
}