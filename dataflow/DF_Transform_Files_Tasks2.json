{
	"name": "DF_Transform_Files_Tasks2",
	"properties": {
		"folder": {
			"name": "TaskTwo"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				},
				{
					"name": "source2"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "LS_Sqldb_Files",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          department_code as string,",
				"          category_code as string,",
				"          category_name as string,",
				"          search_category_code as string,",
				"          series_code as string,",
				"          series_name as string,",
				"          brand_code as string,",
				"          brand_url_code as string,",
				"          brand_name as string,",
				"          min_standard_days_to_ship as integer,",
				"          max_standard_days_to_ship as integer,",
				"          direct_cart_type as string,",
				"          price_check_less_flag as string,",
				"          min_standard_unit_price as integer,",
				"          max_standard_unit_price as integer,",
				"          min_price_per_piece as integer,",
				"          max_price_per_piece as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'products',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false) ~> source2",
				"source1 aggregate(groupBy(department_code,",
				"          category_name),",
				"     AvgMaxPrice = avg(max_standard_unit_price),",
				"          AvgMinPrice = avg(min_standard_unit_price),",
				"          TotalProducts = count(series_code)) ~> aggregate1",
				"source1 aggregate(groupBy(brand_name),",
				"     TotalProducts = count(series_code),",
				"          MinDeliveryDays = min(min_standard_days_to_ship),",
				"          MaxDeliveryDays = max(max_standard_days_to_ship)) ~> aggregate2",
				"aggregate2 derive(shipping_priority = iif(MaxDeliveryDays <= 10, 'Express',\r",
				"                        iif(MaxDeliveryDays > 50, 'Standard', 'Economy'))) ~> derivedColumn1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'report',",
				"     tableName: 'CategoryMinMaxPrice',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'report',",
				"     tableName: 'BrandDetails',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
			]
		}
	}
}